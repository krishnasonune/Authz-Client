# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: AWS Login Authenticatation
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name : Build & Push Docker Image to AWS ECR
      run : |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_REGISTRY }}
          docker build -t ${{ secrets.AWS_REPO }}:${{ github.sha }} .
          docker tag ${{ secrets.AWS_REPO }}:${{ github.sha }} ${{ secrets.AWS_REGISTRY }}/${{ secrets.AWS_REPO }}:${{ github.sha }}
          docker push ${{ secrets.AWS_REGISTRY }}/${{ secrets.AWS_REPO }}:${{ github.sha }}

  deploy:
    runs-on : ubuntu-latest
    needs: build
    steps:
    - name: Authenticate to AWS
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Pull image from ECR and Test
      run : |
        docker pull ${{ secrets.AWS_REGISTRY }}/${{ secrets.AWS_REPO }}:${{ github.sha }}
        docker run -d -p 80:80 --name microui ${{ secrets.AWS_REGISTRY }}/${{ secrets.AWS_REPO }}:${{ github.sha }}
        docker logs microui